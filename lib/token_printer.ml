(**Pretty printing tokens generated by lexer*)
let lexpp file =
    let buffer = Lexing.from_string file in
    let rec print_tokens () =
        let lexres = Lexer.token buffer in
        match lexres with
            | BACTIONS -> Printf.printf "\nBACTIONS " ; print_tokens ()
            | WACTIONS -> Printf.printf "\nWACTIONS " ; print_tokens ()
            | COLON -> Printf.printf "COLON " ; print_tokens ()
            | COMMA -> Printf.printf "COMMA " ; print_tokens ()
            | ACTION -> Printf.printf "ACTION " ; print_tokens ()
            | PARAMS -> Printf.printf "PARAMS " ; print_tokens ()
            | PRECOND -> Printf.printf "PRECOND " ; print_tokens ()
            | EFFECT -> Printf.printf "EFFECT " ; print_tokens ()
            | LPAREN -> Printf.printf "LPAREN " ; print_tokens ()
            | RPAREN -> Printf.printf "RPAREN " ; print_tokens ()
            | BLACK -> Printf.printf "BLACK " ; print_tokens ()
            | WHITE -> Printf.printf "WHITE " ; print_tokens ()
            | OPEN -> Printf.printf "OPEN " ; print_tokens ()
            | NOT -> Printf.printf "NOT " ; print_tokens ()
            | IDENT s -> Printf.printf "IDENT(%s) " s; print_tokens ()
            | POSX  -> Printf.printf "POSX " ; print_tokens ()
            | POSY -> Printf.printf "POSY " ; print_tokens ()
            | XMIN -> Printf.printf "XMIN " ; print_tokens ()
            | XMAX -> Printf.printf "XMAX " ; print_tokens ()
            | YMIN -> Printf.printf "YMIN " ; print_tokens ()
            | YMAX -> Printf.printf "YMAX " ; print_tokens ()
            | PLUS -> Printf.printf "PLUS " ; print_tokens ()
            | MINUS -> Printf.printf "MINUS " ; print_tokens ()
            | INT x -> Printf.printf "INT(%s) " (Int64.to_string x); print_tokens ()
            | BOARDSIZE -> Printf.printf "\nBOARDSIZE " ; print_tokens ()
            | INIT -> Printf.printf "\nINIT " ; print_tokens ()
            | DEPTH -> Printf.printf "DEPTH" ; print_tokens ()
            | BGOALS  -> Printf.printf "\nBGOALS " ; print_tokens ()
            | WGOALS -> Printf.printf "\nWGOALS " ; print_tokens ()
            | FALSE -> Printf.printf "FALSE " ; print_tokens ()
            | BTURN -> Printf.printf "\nBTURN " ; print_tokens ()
            | SECOND -> Printf.printf "SECOND " ; print_tokens ()
            | NL -> Printf.printf "NL " ; print_tokens ()
            | BREAKER -> Printf.printf "BREAKER " ; print_tokens ()
            | EOF -> ()
        in print_tokens ()
